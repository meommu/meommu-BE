name: Deploy Main to Ubuntu Server with Gradle and Docker

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Repository Checkout
        uses: actions/checkout@v3

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 환경 변수 설정
      - name: Set up Environment
        run: echo "${{ secrets.PROD_ENV_PROPERTIES }}" > ./.env

      # Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('/.gradle', '/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradlew 권한 설정
      - name: Grant Execute Permisson for Gradlew
        run: chmod +x gradlew

      # 빌드
      - name: Build with Gradle
        run: ./gradlew clean build --stacktrace

      # docker hub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # dockerfile을 이용해 이미지를 빌드 후 도커 허브에 push
      - name: Docker Hub build & push
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}  -f ./.docker/dockerfile --push .

      # deploy.sh 파일 서버로 전달
      - name: Send deploy.sh to Prod Ubuntu Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./script/deploy.sh"
          target: "/home/jdi0222/"

      # 도커 컴포즈 설정 파일 서버로 전달
      - name: Send docker-compose.yml to Prod Ubuntu Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./.docker/docker-compose.yml"
          target: "/home/jdi0222/"

      # Ubuntu에 접속하고 배포
      - name: Deploy to Prod Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            sudo cp /home/jdi0222/.docker/docker-compose.yml /home/jdi0222
            sudo cp /home/jdi0222/script/deploy.sh /home/jdi0222
            cd /home/jdi0222
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            chmod 777 ./deploy.sh
            ./deploy.sh
            docker image prune -f
